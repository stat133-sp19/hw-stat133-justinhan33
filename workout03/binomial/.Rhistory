expect_length(check_success(1, 5), 1)
expect_length(check_success(1, 5), 1)
expect_length(check_success(c(1,2,3,4), 5), 1)
})
expect_warning(check_trials(10,11,12,13))
expect_warning(check_trials(c(10,11,12,13)))
expect_warning(check_trials(c(23, 45, 67, 101, 2230)))
context("Tests for checker functions")
#check_prob
test_that("check_prob works with parameter within range", {
expect_true(check_prob(0))
expect_true(check_prob(0.5))
expect_true(check_prob(1))
})
test_that("check_prob produces a warning for parameter of invalid length", {
expect_warning(check_prob(c(0.1,0.2)))
expect_warning(check_prob(c(0, 0.5, 0.7, 0.88, 1)))
})
test_that("check_prob fails for parameter outside of range", {
expect_error(check_prob(-0.5))
expect_error(check_prob(1.5))
})
#check_trials
test_that("check_trials works with non-negative parameter", {
expect_true(check_trials(5))
expect_true(check_trials(10))
expect_true(check_trials(15))
})
test_that("check_trials fails with negative parameter", {
expect_error(check_trials(-5))
expect_error(check_trials(-10))
expect_error(check_trials(-15))
})
test_that("check_trials produces a warning for parameter of invalid length", {
expect_warning(check_trials(c(10,11,12,13)))
expect_warning(check_trials(c(23, 45, 67, 101, 2230)))
})
#check_success
test_that("check_success works valid paramters", {
expect_true(check_success(1, 5))
expect_true(check_success(c(1,2,3), 5))
})
test_that("check_success fails when first parameter is outside of range", {
expect_error(check_success(-1, 5))
expect_error(check_success(6, 5))
expect_error(check_success(c(5,6,7,8), 7))
})
test_that("check_success produces a single output", {
expect_length(check_success(1, 5), 1)
expect_length(check_success(1, 5), 1)
expect_length(check_success(c(1,2,3,4), 5), 1)
})
expect_lte(aux_mean(10, 0.5), 10)
expect_lte(aux_mean(10, 1), 10)
expect_lte(aux_mean(10, 0), 10)
expect_lte(aux_mean(10, 0.5), 10)
expect_lte(aux_mean(10, 1), 10)
expect_lte(aux_mean(10, 0), 10)
expect_lte(aux_mean(5, 0.5), 5)
expect_lte(aux_mean(5, 1), 5)
expect_lte(aux_mean(5, 0), 5)
expect_length(aux_mean(10, 0.5), 1)
expect_length(aux_mean(13, 0.75), 1)
expect_length(aux_mean(20, 1), 1)
expect_length(aux_mean(25, 0), 1)
aux_mean(c(1,2,3), 0.4)
class(1.2)
expect_is(aux_mean(10, 0.5), class(10))
expect_is(aux_mean(17, 0.25), class(17))
expect_length(aux_variance(10, 0.5), 1)
expect_length(aux_variance(13, 0.75), 1)
expect_length(aux_variance(20, 1), 1)
expect_length(aux_variance(25, 0), 1)
expect_is(aux_mean(10, 0.5), class(10))
expect_is(aux_mean(10, 0.5), class(0.5))
expect_is(aux_mean(17, 0.25), class(17))
expect_is(aux_mean(17, 0.25), class(0.25))
expect_is(aux_variance(10, 0.5), class(10))
expect_is(aux_variance(10, 0.5), class(0.5))
expect_is(aux_variance(17, 0.25), class(17))
expect_is(aux_variance(17, 0.25), class(0.25))
expect_gte(aux_variance(10, 0.5), 0)
expect_gte(aux_variance(10, 0.75), 0)
expect_gte(aux_variance(10, 0), 0)
expect_gte(aux_variance(10, 1), 0)
n <- 12
p <- 0.6
expect_lte(aux_mode(n, p), n*p+p)
n <- 12
p <- 0.6
expect_lte(aux_mode(n, p), n*p+p)
expect_is(aux_mode(10, 0.5), class(10))
expect_is(aux_mode(10, 0.5), class(0.5))
expect_is(aux_mode(17, 0.25), class(17))
expect_is(aux_mode(17, 0.25), class(0.25))
expect_length(aux_mode(10, 0.5), 1)
expect_length(aux_mode(9, 0.5), 2)
expect_length(aux_mode(49, 0.3), 2)
expect_gte(aux_mode(10, 0.5), 0)
expect_gte(aux_mode(9, 0.5), 0)
expect_gte(aux_mode(49, 0.3), 0)
expect_gte(aux_mode(10, 0.5), 0)
expect_gte(aux_mode(92, 0.5), 0)
expect_gte(aux_mode(49, 0.3), c(0,0))
expect_gte(aux_mode(10, 0.5), 0)
expect_gte(aux_mode(92, 0.5), 0)
expect_gte(aux_mode(49, 0.4), 0)
expect_gte(aux_mode(10, 0.5), 0)
expect_gte(aux_mode(92, 0.5), 0)
expect_gte(aux_mode(48, 0.4), 0)
aux_mode(10, 0.5)
aux_mode(92, 0.5)
aux_mode(48, 0.4
)
aux_mode(49, 0.4)
expect_gte(aux_mode(49, 0.4), c(20, 19))
expect_equal(aux_mode(10, 0.5), 5)
expect_equal(aux_mode(92, 0.5), 46)
expect_equal(aux_mode(49, 0.4), c(20, 19))
expect_error(aux_skewness(0, 0.5))
expect_error(aux_skewness(10, 0))
expect_error(aux_skewness(18, 1))
expect_length(aux_mode(10, 0.5), 1)
expect_length(aux_mode(49, 0.4), 1)
expect_length(aux_mode(92, 0.5), 1)
expect_length(aux_skewness(10, 0.5), 1)
expect_length(aux_skewness(49, 0.4), 1)
expect_length(aux_skewness(92, 0.5), 1)
expect_is(aux_skewness(10, 0.5), class(10))
expect_is(aux_skewness(10, 0.5), class(0.5))
expect_is(aux_skewness(17, 0.25), class(17))
expect_is(aux_skewness(17, 0.25), class(0.25))
expect_error(aux_kurtosis(0, 0.5))
expect_error(aux_kurtosis(10, 0))
expect_error(aux_kurtosis(18, 1))
expect_length(aux_kurtosis(10, 0.5), 1)
expect_length(aux_kurtosis(49, 0.4), 1)
expect_length(aux_kurtosis(92, 0.5), 1)
expect_is(aux_kurtosis(10, 0.5), class(10))
expect_is(aux_kurtosis(10, 0.5), class(0.5))
expect_is(aux_kurtosis(17, 0.25), class(17))
expect_is(aux_kurtosis(17, 0.25), class(0.25))
context("Tests for auxiliary functions")
#aux_mean
test_that("aux_mean is less than or equal to the first parameter", {
expect_lte(aux_mean(10, 0.5), 10)
expect_lte(aux_mean(10, 1), 10)
expect_lte(aux_mean(10, 0), 10)
expect_lte(aux_mean(5, 0.5), 5)
expect_lte(aux_mean(5, 1), 5)
expect_lte(aux_mean(5, 0), 5)
})
test_that("aux_mean produces a single output", {
expect_length(aux_mean(10, 0.5), 1)
expect_length(aux_mean(13, 0.75), 1)
expect_length(aux_mean(20, 1), 1)
expect_length(aux_mean(25, 0), 1)
})
test_that("aux_mean produces output of class type equal to that of its parameters", {
expect_is(aux_mean(10, 0.5), class(10))
expect_is(aux_mean(10, 0.5), class(0.5))
expect_is(aux_mean(17, 0.25), class(17))
expect_is(aux_mean(17, 0.25), class(0.25))
})
#aux_variance
test_that("aux_variance produces a single output", {
expect_length(aux_variance(10, 0.5), 1)
expect_length(aux_variance(13, 0.75), 1)
expect_length(aux_variance(20, 1), 1)
expect_length(aux_variance(25, 0), 1)
})
test_that("aux_variance produces output of class type equal to that of its parameters", {
expect_is(aux_variance(10, 0.5), class(10))
expect_is(aux_variance(10, 0.5), class(0.5))
expect_is(aux_variance(17, 0.25), class(17))
expect_is(aux_variance(17, 0.25), class(0.25))
})
test_that("aux_variance produces non-negative output", {
expect_gte(aux_variance(10, 0.5), 0)
expect_gte(aux_variance(10, 0.75), 0)
expect_gte(aux_variance(10, 0), 0)
expect_gte(aux_variance(10, 1), 0)
})
#aux_mode
test_that("aux_mode produces output of class type equal to that of its parameters", {
expect_is(aux_mode(10, 0.5), class(10))
expect_is(aux_mode(10, 0.5), class(0.5))
expect_is(aux_mode(17, 0.25), class(17))
expect_is(aux_mode(17, 0.25), class(0.25))
})
test_that("aux_mode produces output with valid length", {
expect_length(aux_mode(10, 0.5), 1)
expect_length(aux_mode(9, 0.5), 2)
expect_length(aux_mode(49, 0.3), 2)
})
test_that("aux_mode works with valid parameters", {
expect_equal(aux_mode(10, 0.5), 5)
expect_equal(aux_mode(92, 0.5), 46)
expect_equal(aux_mode(49, 0.4), c(20, 19))
})
#aux_skewness
test_that("aux_skewness fails for certain parameters", {
expect_error(aux_skewness(0, 0.5))
expect_error(aux_skewness(10, 0))
expect_error(aux_skewness(18, 1))
})
test_that("aux_skewness produces a single output", {
expect_length(aux_skewness(10, 0.5), 1)
expect_length(aux_skewness(49, 0.4), 1)
expect_length(aux_skewness(92, 0.5), 1)
})
test_that("aux_skewness produces output of class type equal to that of its parameters", {
expect_is(aux_skewness(10, 0.5), class(10))
expect_is(aux_skewness(10, 0.5), class(0.5))
expect_is(aux_skewness(17, 0.25), class(17))
expect_is(aux_skewness(17, 0.25), class(0.25))
})
#aux_kurtosis
test_that("aux_kurtosis fails for certain parameters", {
expect_error(aux_kurtosis(0, 0.5))
expect_error(aux_kurtosis(10, 0))
expect_error(aux_kurtosis(18, 1))
})
test_that("aux_kurtosis produces a single output", {
expect_length(aux_kurtosis(10, 0.5), 1)
expect_length(aux_kurtosis(49, 0.4), 1)
expect_length(aux_kurtosis(92, 0.5), 1)
})
test_that("aux_kurtosis produces output of class type equal to that of its parameters", {
expect_is(aux_kurtosis(10, 0.5), class(10))
expect_is(aux_kurtosis(10, 0.5), class(0.5))
expect_is(aux_kurtosis(17, 0.25), class(17))
expect_is(aux_kurtosis(17, 0.25), class(0.25))
})
asdfadl;sfjlkadjsfadsfas
context("Tests for auxiliary functions")
#aux_mean
test_that("aux_mean is less than or equal to the first parameter", {
expect_lte(aux_mean(10, 0.5), 10)
expect_lte(aux_mean(10, 1), 10)
expect_lte(aux_mean(10, 0), 10)
expect_lte(aux_mean(5, 0.5), 5)
expect_lte(aux_mean(5, 1), 5)
expect_lte(aux_mean(5, 0), 5)
})
test_that("aux_mean produces a single output", {
expect_length(aux_mean(10, 0.5), 1)
expect_length(aux_mean(13, 0.75), 1)
expect_length(aux_mean(20, 1), 1)
expect_length(aux_mean(25, 0), 1)
})
test_that("aux_mean produces output of class type equal to that of its parameters", {
expect_is(aux_mean(10, 0.5), class(10))
expect_is(aux_mean(10, 0.5), class(0.5))
expect_is(aux_mean(17, 0.25), class(17))
expect_is(aux_mean(17, 0.25), class(0.25))
})
#aux_variance
test_that("aux_variance produces a single output", {
expect_length(aux_variance(10, 0.5), 1)
expect_length(aux_variance(13, 0.75), 1)
expect_length(aux_variance(20, 1), 1)
expect_length(aux_variance(25, 0), 1)
})
test_that("aux_variance produces output of class type equal to that of its parameters", {
expect_is(aux_variance(10, 0.5), class(10))
expect_is(aux_variance(10, 0.5), class(0.5))
expect_is(aux_variance(17, 0.25), class(17))
expect_is(aux_variance(17, 0.25), class(0.25))
})
test_that("aux_variance produces non-negative output", {
expect_gte(aux_variance(10, 0.5), 0)
expect_gte(aux_variance(10, 0.75), 0)
expect_gte(aux_variance(10, 0), 0)
expect_gte(aux_variance(10, 1), 0)
})
#aux_mode
test_that("aux_mode produces output of class type equal to that of its parameters", {
expect_is(aux_mode(10, 0.5), class(10))
expect_is(aux_mode(10, 0.5), class(0.5))
expect_is(aux_mode(17, 0.25), class(17))
expect_is(aux_mode(17, 0.25), class(0.25))
})
test_that("aux_mode produces output with valid length", {
expect_length(aux_mode(10, 0.5), 1)
expect_length(aux_mode(9, 0.5), 2)
expect_length(aux_mode(49, 0.3), 2)
})
test_that("aux_mode works with valid parameters", {
expect_equal(aux_mode(10, 0.5), 5)
expect_equal(aux_mode(92, 0.5), 46)
expect_equal(aux_mode(49, 0.4), c(20, 19))
})
#aux_skewness
test_that("aux_skewness fails for certain parameters", {
expect_error(aux_skewness(0, 0.5))
expect_error(aux_skewness(10, 0))
expect_error(aux_skewness(18, 1))
})
test_that("aux_skewness produces a single output", {
expect_length(aux_skewness(10, 0.5), 1)
expect_length(aux_skewness(49, 0.4), 1)
expect_length(aux_skewness(92, 0.5), 1)
})
test_that("aux_skewness produces output of class type equal to that of its parameters", {
expect_is(aux_skewness(10, 0.5), class(10))
expect_is(aux_skewness(10, 0.5), class(0.5))
expect_is(aux_skewness(17, 0.25), class(17))
expect_is(aux_skewness(17, 0.25), class(0.25))
})
#aux_kurtosis
test_that("aux_kurtosis fails for certain parameters", {
expect_error(aux_kurtosis(0, 0.5))
expect_error(aux_kurtosis(10, 0))
expect_error(aux_kurtosis(18, 1))
})
test_that("aux_kurtosis produces a single output", {
expect_length(aux_kurtosis(10, 0.5), 1)
expect_length(aux_kurtosis(49, 0.4), 1)
expect_length(aux_kurtosis(92, 0.5), 1)
})
test_that("aux_kurtosis produces output of class type equal to that of its parameters", {
expect_is(aux_kurtosis(10, 0.5), class(10))
expect_is(aux_kurtosis(10, 0.5), class(0.5))
expect_is(aux_kurtosis(17, 0.25), class(17))
expect_is(aux_kurtosis(17, 0.25), class(0.25))
})
expect_length(bin_choose(5, 1:3), 3)
expect_length(bin_choose(5, 1:3), 3)
expect_length(bin_choose(5, 2), 1)
expect_error(bin_choose(5, 6))
expect_error(bin_choose(5, c(4,5,6)))
bin_choose(12, c(10,11))
expect_error(bin_probability(2.5, 10, 0.5))
expect_error(bin_probability(2, 10.5, 0.5))
expect_error(bin_probability(2, 10, 2))
expect_error(bin_probability(2.5, 10, 0.5))
expect_error(bin_probability(2, 10.5, 0.5))
expect_error(bin_probability(2, 10, 2))
expect_error(bin_probability(2, 10, -0.5))
expect_error(bin_probability(-2, 10, 0.5))
expect_error(bin_probability(2, -10, 0.5))
expect_error(bin_probability(15, 10, 0.5))
expect_length(bin_probability(0:2, 5, 0.5), 3)
expect_length(bin_probability(55, 100, 0.45), 1)
expect_is(bin_probability(55, 100, 0.45), class(55))
expect_is(bin_probability(55, 100, 0.45), class(100))
expect_is(bin_probability(55, 100, 0.45), class(0.45))
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob) {
success <- c(0:trials)
probability <- bin_probability(success, trials, prob)
distribution_df <- data.frame(success, probability)
class(distribution_df) <- c("bindis", "data.frame")
return(distribution_df)
}
bin_distribution(trials = 5, prob = 0.5)
class(bin_distribution(trials = 5, prob = 0.5))
length(bin_distribution(trials = 5, prob = 0.5))
row(bin_distribution(trials = 5, prob = 0.5))
expect_is(bin_distribution(5, 0.5), c("bindis", "data.frame"))
expect_length(bin_distribution(5, 0.5), 2)
expect_length(bin_distribution(8, 0.5), 2)
expect_true(bin_distribution(5, 0.5))
expect_false(bin_distribution(5, 0.5))
expect_named(bin_distribution(5, 0.5))
expect_is(bin_cumulative(5, 0.5), c("bincum", "data.frame"))
expect_is(bin_cumulative(8, 0.5), c("bincum", "data.frame"))
expect_length(bin_cumulative(5, 0.5), 3)
expect_length(bin_cumulative(8, 0.5), 3)
expect_named(bin_cumulative(5, 0.5))
expect_named(bin_cumulative(8, 0.5))
bin_cumulative(8, 0.5)
bin_cumulative(8, 1.5)
expect_error(bin_cumulative(5, -0.5))
expect_error(bin_cumulative(8, 1.5))
expect_error(bin_cumulative(-10, 0.5))
expect_error(bin_cumulative(6.5, 0.5))
bin_probability(1, 6.5, 0.5)
expect_error(bin_cumulative(6.5, 0.5))
expect_error(bin_cumulative(6, 0.5))
expect_error(bin_cumulative(6, -0.5))
bin_probability <- function(success, trials, prob) {
check_trials(trials)
check_prob(prob)
check_success(success, trials)
probability <- bin_choose(trials, success)*(prob^(success))*((1-prob)^(trials-success))
return(probability)
}
expect_error(bin_cumulative(6.5, 0.5))
bin_cumulative(6.5, 0.5)
0:6.5
bin_probability(0:6, 6.5, 0.5)
bin_cumulative <- function(trials, prob) {
success <- c(0:trials)
probability <- bin_probability(success, trials, prob)
cumulative <- cumsum(probability)
cumulative_df <- data.frame(success, probability, cumulative)
class(cumulative_df) <- c("bincum", "data.frame")
return(cumulative_df)
}
bin_probability(0:6, 6.5, 0.5)
expect_error(bin_cumulative(6.5, 0.5))
huga
expect_error(bin_cumulative(5, -0.5))
expect_error(bin_cumulative(8, 1.5))
expect_error(bin_cumulative(-10, 0.5))
expect_error(bin_cumulative(6.5, 0.5))
bin_distribution <- function(trials, prob) {
success <- c(0:trials)
probability <- bin_probability(success, trials, prob)
distribution_df <- data.frame(success, probability)
class(distribution_df) <- c("bindis", "data.frame")
return(distribution_df)
}
expect_error(bin_distribution(5, -0.5))
expect_error(bin_distribution(8, 1.5))
expect_error(bin_distribution(-10, 0.5))
expect_error(bin_distribution(6.5, 0.5))
test errors
context("Tests for main functions")
#bin_choose
test_that("bin_choose produces output with valid length", {
expect_length(bin_choose(5, 1:3), 3)
expect_length(bin_choose(5, 2), 1)
})
test_that("bin_choose fails for invalid second parameter", {
expect_error(bin_choose(5, 6))
expect_error(bin_choose(5, c(4,5,6)))
})
test_that("bin_choose works with valid parameters", {
expect_equal(bin_choose(5, 2), 10)
expect_equal(bin_choose(10, 5), 252)
expect_equal(bin_choose(12, c(10, 11)), c(66, 12))
})
#bin_probability
test_that("bin_probability fails for invalid parameters", {
expect_error(bin_probability(2.5, 10, 0.5))
expect_error(bin_probability(2, 10.5, 0.5))
expect_error(bin_probability(2, 10, 2))
expect_error(bin_probability(2, 10, -0.5))
expect_error(bin_probability(-2, 10, 0.5))
expect_error(bin_probability(2, -10, 0.5))
expect_error(bin_probability(15, 10, 0.5))
})
test_that("bin_probability produces output with valid length", {
expect_length(bin_probability(0:2, 5, 0.5), 3)
expect_length(bin_probability(55, 100, 0.45), 1)
})
test_that("bin_probability produces output of class type equal to that of its parameters", {
expect_is(bin_probability(55, 100, 0.45), class(55))
expect_is(bin_probability(55, 100, 0.45), class(100))
expect_is(bin_probability(55, 100, 0.45), class(0.45))
})
#bin_distribution
test_that("bin_distribution produces output of two classes", {
expect_is(bin_distribution(5, 0.5), c("bindis", "data.frame"))
expect_is(bin_distribution(8, 0.5), c("bindis", "data.frame"))
})
test_that("bin_distribution produces output with valid number of columns", {
expect_length(bin_distribution(5, 0.5), 2)
expect_length(bin_distribution(8, 0.5), 2)
})
test_that("bin_distribution fails with invalid parameters", {
expect_error(bin_distribution(5, -0.5))
expect_error(bin_distribution(8, 1.5))
expect_error(bin_distribution(-10, 0.5))
expect_error(bin_distribution(6.5, 0.5))
})
#bin_cumulative
test_that("bin_cumulative produces output of two classes", {
expect_is(bin_cumulative(5, 0.5), c("bincum", "data.frame"))
expect_is(bin_cumulative(8, 0.5), c("bincum", "data.frame"))
})
test_that("bin_cumulative produces output with valid number of columns", {
expect_length(bin_cumulative(5, 0.5), 3)
expect_length(bin_cumulative(8, 0.5), 3)
})
test_that("bin_cumulative fails with invalid parameters", {
expect_error(bin_cumulative(5, -0.5))
expect_error(bin_cumulative(8, 1.5))
expect_error(bin_cumulative(-10, 0.5))
expect_error(bin_cumulative(6.5, 0.5))
})
getwd()
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::install()
getwd()
devtools::document()
devtools::document()
devtools::check_man()
devtools::check_man()
devtools::build_vignettes()
devtools::build()
devtools::test()
devtools::install()
detach("package:binomial", unload=TRUE)
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::install()
detach("package:binomial", unload=TRUE)
remove.packages("binomial")
getwd()
devtools::install()
